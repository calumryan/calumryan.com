{"id":"../node_modules/sshpk/lib/formats/auto.js","dependencies":[{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/package.json","includedInParent":true,"mtime":1582912700200},{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/package.json","includedInParent":true,"mtime":1582905740121},{"name":"assert-plus","loc":{"line":8,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/assert-plus/assert.js"},{"name":"safer-buffer","loc":{"line":9,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/safer-buffer/safer.js"},{"name":"../utils","loc":{"line":10,"column":20},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/utils.js"},{"name":"../key","loc":{"line":11,"column":18},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/key.js"},{"name":"../private-key","loc":{"line":12,"column":25},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js"},{"name":"./pem","loc":{"line":14,"column":18},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/pem.js"},{"name":"./ssh","loc":{"line":15,"column":18},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js"},{"name":"./rfc4253","loc":{"line":16,"column":22},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/rfc4253.js"},{"name":"./dnssec","loc":{"line":17,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/dnssec.js"},{"name":"./putty","loc":{"line":18,"column":20},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/putty.js"}],"generated":{"js":"\n// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n  read: read,\n  write: write\n};\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar utils = require('../utils');\n\nvar Key = require('../key');\n\nvar PrivateKey = require('../private-key');\n\nvar pem = require('./pem');\n\nvar ssh = require('./ssh');\n\nvar rfc4253 = require('./rfc4253');\n\nvar dnssec = require('./dnssec');\n\nvar putty = require('./putty');\n\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';\n\nfunction read(buf, options) {\n  if (typeof buf === 'string') {\n    if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);\n    if (buf.match(/^\\s*ssh-[a-z]/)) return ssh.read(buf, options);\n    if (buf.match(/^\\s*ecdsa-/)) return ssh.read(buf, options);\n    if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);\n    if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n    buf = Buffer.from(buf, 'binary');\n  } else {\n    assert.buffer(buf);\n    if (findPEMHeader(buf)) return pem.read(buf, options);\n    if (findSSHHeader(buf)) return ssh.read(buf, options);\n    if (findPuTTYHeader(buf)) return putty.read(buf, options);\n    if (findDNSSECHeader(buf)) return dnssec.read(buf, options);\n  }\n\n  if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);\n  throw new Error('Failed to auto-detect format of key');\n}\n\nfunction findPuTTYHeader(buf) {\n  var offset = 0;\n\n  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;\n\n  if (offset + 22 <= buf.length && buf.slice(offset, offset + 22).toString('ascii').toLowerCase() === 'putty-user-key-file-2:') return true;\n  return false;\n}\n\nfunction findSSHHeader(buf) {\n  var offset = 0;\n\n  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;\n\n  if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString('ascii') === 'ssh-') return true;\n  if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-') return true;\n  return false;\n}\n\nfunction findPEMHeader(buf) {\n  var offset = 0;\n\n  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10)) ++offset;\n\n  if (buf[offset] !== 45) return false;\n\n  while (offset < buf.length && buf[offset] === 45) ++offset;\n\n  while (offset < buf.length && buf[offset] === 32) ++offset;\n\n  if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN') return false;\n  return true;\n}\n\nfunction findDNSSECHeader(buf) {\n  // private case first\n  if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;\n  var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n  if (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX) return true; // public-key RFC3110 ?\n  // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n  // skip any comment-lines\n\n  if (typeof buf !== 'string') {\n    buf = buf.toString('ascii');\n  }\n\n  var lines = buf.split('\\n');\n  var line = 0;\n  /* JSSTYLED */\n\n  while (lines[line].match(/^\\;/)) line++;\n\n  if (lines[line].toString('ascii').match(/\\. IN KEY /)) return true;\n  if (lines[line].toString('ascii').match(/\\. IN DNSKEY /)) return true;\n  return false;\n}\n\nfunction write(key, options) {\n  throw new Error('\"auto\" format cannot be used for writing');\n}"},"sourceMaps":null,"error":null,"hash":"d7545b8643783deb68159a4af484712a","cacheData":{"env":{}}}