{"id":"../node_modules/sshpk/lib/private-key.js","dependencies":[{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/package.json","includedInParent":true,"mtime":1582912700200},{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/package.json","includedInParent":true,"mtime":1582905740121},{"name":"assert-plus","loc":{"line":5,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/assert-plus/assert.js"},{"name":"safer-buffer","loc":{"line":6,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/safer-buffer/safer.js"},{"name":"./algs","loc":{"line":7,"column":19},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/algs.js"},{"name":"crypto","loc":{"line":8,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/crypto-browserify/index.js"},{"name":"./fingerprint","loc":{"line":9,"column":26},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/fingerprint.js"},{"name":"./signature","loc":{"line":10,"column":24},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/signature.js"},{"name":"./errors","loc":{"line":11,"column":19},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/errors.js"},{"name":"util","loc":{"line":12,"column":19},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/util/util.js"},{"name":"./utils","loc":{"line":13,"column":20},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/utils.js"},{"name":"./dhe","loc":{"line":14,"column":18},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/dhe.js"},{"name":"./ed-compat","loc":{"line":17,"column":23},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/ed-compat.js"},{"name":"tweetnacl","loc":{"line":18,"column":19},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/tweetnacl/nacl-fast.js"},{"name":"./key","loc":{"line":20,"column":18},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/key.js"},{"name":"./formats/auto","loc":{"line":27,"column":26},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/auto.js"},{"name":"./formats/pem","loc":{"line":28,"column":25},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/pem.js"},{"name":"./formats/pkcs1","loc":{"line":29,"column":27},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/pkcs1.js"},{"name":"./formats/pkcs8","loc":{"line":30,"column":27},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/pkcs8.js"},{"name":"./formats/rfc4253","loc":{"line":31,"column":29},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/rfc4253.js"},{"name":"./formats/ssh-private","loc":{"line":32,"column":33},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh-private.js"},{"name":"./formats/dnssec","loc":{"line":35,"column":28},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/dnssec.js"}],"generated":{"js":"\n// Copyright 2017 Joyent, Inc.\nmodule.exports = PrivateKey;\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar algs = require('./algs');\n\nvar crypto = require('crypto');\n\nvar Fingerprint = require('./fingerprint');\n\nvar Signature = require('./signature');\n\nvar errs = require('./errors');\n\nvar util = require('util');\n\nvar utils = require('./utils');\n\nvar dhe = require('./dhe');\n\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\n\nvar edCompat = require('./ed-compat');\n\nvar nacl = require('tweetnacl');\n\nvar Key = require('./key');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['ssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\n\nfunction PrivateKey(opts) {\n  assert.object(opts, 'options');\n  Key.call(this, opts);\n  this._pubCache = undefined;\n}\n\nutil.inherits(PrivateKey, Key);\nPrivateKey.formats = formats;\n\nPrivateKey.prototype.toBuffer = function (format, options) {\n  if (format === undefined) format = 'pkcs1';\n  assert.string(format, 'format');\n  assert.object(formats[format], 'formats[format]');\n  assert.optionalObject(options, 'options');\n  return formats[format].write(this, options);\n};\n\nPrivateKey.prototype.hash = function (algo, type) {\n  return this.toPublic().hash(algo, type);\n};\n\nPrivateKey.prototype.fingerprint = function (algo, type) {\n  return this.toPublic().fingerprint(algo, type);\n};\n\nPrivateKey.prototype.toPublic = function () {\n  if (this._pubCache) return this._pubCache;\n  var algInfo = algs.info[this.type];\n  var pubParts = [];\n\n  for (var i = 0; i < algInfo.parts.length; ++i) {\n    var p = algInfo.parts[i];\n    pubParts.push(this.part[p]);\n  }\n\n  this._pubCache = new Key({\n    type: this.type,\n    source: this,\n    parts: pubParts\n  });\n  if (this.comment) this._pubCache.comment = this.comment;\n  return this._pubCache;\n};\n\nPrivateKey.prototype.derive = function (newType) {\n  assert.string(newType, 'type');\n  var priv, pub, pair;\n\n  if (this.type === 'ed25519' && newType === 'curve25519') {\n    priv = this.part.k.data;\n    if (priv[0] === 0x00) priv = priv.slice(1);\n    pair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n    pub = Buffer.from(pair.publicKey);\n    return new PrivateKey({\n      type: 'curve25519',\n      parts: [{\n        name: 'A',\n        data: utils.mpNormalize(pub)\n      }, {\n        name: 'k',\n        data: utils.mpNormalize(priv)\n      }]\n    });\n  } else if (this.type === 'curve25519' && newType === 'ed25519') {\n    priv = this.part.k.data;\n    if (priv[0] === 0x00) priv = priv.slice(1);\n    pair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n    pub = Buffer.from(pair.publicKey);\n    return new PrivateKey({\n      type: 'ed25519',\n      parts: [{\n        name: 'A',\n        data: utils.mpNormalize(pub)\n      }, {\n        name: 'k',\n        data: utils.mpNormalize(priv)\n      }]\n    });\n  }\n\n  throw new Error('Key derivation not supported from ' + this.type + ' to ' + newType);\n};\n\nPrivateKey.prototype.createVerify = function (hashAlgo) {\n  return this.toPublic().createVerify(hashAlgo);\n};\n\nPrivateKey.prototype.createSign = function (hashAlgo) {\n  if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();\n  assert.string(hashAlgo, 'hash algorithm');\n  /* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\n  if (this.type === 'ed25519' && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);\n  if (this.type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');\n  var v, nm, err;\n\n  try {\n    nm = hashAlgo.toUpperCase();\n    v = crypto.createSign(nm);\n  } catch (e) {\n    err = e;\n  }\n\n  if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {\n    nm = 'RSA-';\n    nm += hashAlgo.toUpperCase();\n    v = crypto.createSign(nm);\n  }\n\n  assert.ok(v, 'failed to create verifier');\n  var oldSign = v.sign.bind(v);\n  var key = this.toBuffer('pkcs1');\n  var type = this.type;\n  var curve = this.curve;\n\n  v.sign = function () {\n    var sig = oldSign(key);\n    if (typeof sig === 'string') sig = Buffer.from(sig, 'binary');\n    sig = Signature.parse(sig, type, 'asn1');\n    sig.hashAlgorithm = hashAlgo;\n    sig.curve = curve;\n    return sig;\n  };\n\n  return v;\n};\n\nPrivateKey.parse = function (data, format, options) {\n  if (typeof data !== 'string') assert.buffer(data, 'data');\n  if (format === undefined) format = 'auto';\n  assert.string(format, 'format');\n  if (typeof options === 'string') options = {\n    filename: options\n  };\n  assert.optionalObject(options, 'options');\n  if (options === undefined) options = {};\n  assert.optionalString(options.filename, 'options.filename');\n  if (options.filename === undefined) options.filename = '(unnamed)';\n  assert.object(formats[format], 'formats[format]');\n\n  try {\n    var k = formats[format].read(data, options);\n    assert.ok(k instanceof PrivateKey, 'key is not a private key');\n    if (!k.comment) k.comment = options.filename;\n    return k;\n  } catch (e) {\n    if (e.name === 'KeyEncryptedError') throw e;\n    throw new KeyParseError(options.filename, format, e);\n  }\n};\n\nPrivateKey.isPrivateKey = function (obj, ver) {\n  return utils.isCompatible(obj, PrivateKey, ver);\n};\n\nPrivateKey.generate = function (type, options) {\n  if (options === undefined) options = {};\n  assert.object(options, 'options');\n\n  switch (type) {\n    case 'ecdsa':\n      if (options.curve === undefined) options.curve = 'nistp256';\n      assert.string(options.curve, 'options.curve');\n      return generateECDSA(options.curve);\n\n    case 'ed25519':\n      return generateED25519();\n\n    default:\n      throw new Error('Key generation not supported with key ' + 'type \"' + type + '\"');\n  }\n};\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n * [1,6] -- type arguments for hash() and fingerprint()\n */\n\n\nPrivateKey.prototype._sshpkApiVersion = [1, 6];\n\nPrivateKey._oldVersionDetect = function (obj) {\n  assert.func(obj.toPublic);\n  assert.func(obj.createSign);\n  if (obj.derive) return [1, 3];\n  if (obj.defaultHashAlgorithm) return [1, 2];\n  if (obj.formats['auto']) return [1, 1];\n  return [1, 0];\n};"},"sourceMaps":null,"error":null,"hash":"6a4957f6959b014efae5aadae8b17173","cacheData":{"env":{}}}