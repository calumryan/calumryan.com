{"id":"../node_modules/sshpk/lib/formats/ssh.js","dependencies":[{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/package.json","includedInParent":true,"mtime":1582912700200},{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/package.json","includedInParent":true,"mtime":1582905740121},{"name":"assert-plus","loc":{"line":8,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/assert-plus/assert.js"},{"name":"safer-buffer","loc":{"line":9,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/safer-buffer/safer.js"},{"name":"./rfc4253","loc":{"line":10,"column":22},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/rfc4253.js"},{"name":"../utils","loc":{"line":11,"column":20},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/utils.js"},{"name":"../key","loc":{"line":12,"column":18},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/key.js"},{"name":"../private-key","loc":{"line":13,"column":25},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/private-key.js"},{"name":"./ssh-private","loc":{"line":15,"column":22},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/formats/ssh-private.js"}],"generated":{"js":"\n// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n  read: read,\n  write: write\n};\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar rfc4253 = require('./rfc4253');\n\nvar utils = require('../utils');\n\nvar Key = require('../key');\n\nvar PrivateKey = require('../private-key');\n\nvar sshpriv = require('./ssh-private');\n/*JSSTYLED*/\n\n\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/\n\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\n\nfunction read(buf, options) {\n  if (typeof buf !== 'string') {\n    assert.buffer(buf, 'buf');\n    buf = buf.toString('ascii');\n  }\n\n  var trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n  var m = trimmed.match(SSHKEY_RE);\n  if (!m) m = trimmed.match(SSHKEY_RE2);\n  assert.ok(m, 'key must match regex');\n  var type = rfc4253.algToKeyType(m[1]);\n  var kbuf = Buffer.from(m[2], 'base64');\n  /*\n   * This is a bit tricky. If we managed to parse the key and locate the\n   * key comment with the regex, then do a non-partial read and assert\n   * that we have consumed all bytes. If we couldn't locate the key\n   * comment, though, there may be whitespace shenanigans going on that\n   * have conjoined the comment to the rest of the key. We do a partial\n   * read in this case to try to make the best out of a sorry situation.\n   */\n\n  var key;\n  var ret = {};\n\n  if (m[4]) {\n    try {\n      key = rfc4253.read(kbuf);\n    } catch (e) {\n      m = trimmed.match(SSHKEY_RE2);\n      assert.ok(m, 'key must match regex');\n      kbuf = Buffer.from(m[2], 'base64');\n      key = rfc4253.readInternal(ret, 'public', kbuf);\n    }\n  } else {\n    key = rfc4253.readInternal(ret, 'public', kbuf);\n  }\n\n  assert.strictEqual(type, key.type);\n\n  if (m[4] && m[4].length > 0) {\n    key.comment = m[4];\n  } else if (ret.consumed) {\n    /*\n     * Now the magic: trying to recover the key comment when it's\n     * gotten conjoined to the key or otherwise shenanigan'd.\n     *\n     * Work out how much base64 we used, then drop all non-base64\n     * chars from the beginning up to this point in the the string.\n     * Then offset in this and try to make up for missing = chars.\n     */\n    var data = m[2] + (m[3] ? m[3] : '');\n    var realOffset = Math.ceil(ret.consumed / 3) * 4;\n    data = data.slice(0, realOffset - 2).\n    /*JSSTYLED*/\n    replace(/[^a-zA-Z0-9+\\/=]/g, '') + data.slice(realOffset - 2);\n    var padding = ret.consumed % 3;\n    if (padding > 0 && data.slice(realOffset - 1, realOffset) !== '=') realOffset--;\n\n    while (data.slice(realOffset, realOffset + 1) === '=') realOffset++;\n    /* Finally, grab what we think is the comment & clean it up. */\n\n\n    var trailer = data.slice(realOffset);\n    trailer = trailer.replace(/[\\r\\n]/g, ' ').replace(/^\\s+/, '');\n    if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;\n  }\n\n  return key;\n}\n\nfunction write(key, options) {\n  assert.object(key);\n  if (!Key.isKey(key)) throw new Error('Must be a public key');\n  var parts = [];\n  var alg = rfc4253.keyTypeToAlg(key);\n  parts.push(alg);\n  var buf = rfc4253.write(key);\n  parts.push(buf.toString('base64'));\n  if (key.comment) parts.push(key.comment);\n  return Buffer.from(parts.join(' '));\n}"},"sourceMaps":null,"error":null,"hash":"fe66b79214f7aef5230f43d0be3f0381","cacheData":{"env":{}}}