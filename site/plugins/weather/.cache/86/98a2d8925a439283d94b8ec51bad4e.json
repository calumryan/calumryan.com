{"id":"../node_modules/sshpk/lib/ed-compat.js","dependencies":[{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/package.json","includedInParent":true,"mtime":1582912700200},{"name":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/package.json","includedInParent":true,"mtime":1582905740121},{"name":"tweetnacl","loc":{"line":8,"column":19},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/ed-compat.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/tweetnacl/nacl-fast.js"},{"name":"stream","loc":{"line":9,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/ed-compat.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/stream-browserify/index.js"},{"name":"util","loc":{"line":10,"column":19},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/ed-compat.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/util/util.js"},{"name":"assert-plus","loc":{"line":11,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/ed-compat.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/assert-plus/assert.js"},{"name":"safer-buffer","loc":{"line":12,"column":21},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/ed-compat.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/safer-buffer/safer.js"},{"name":"./signature","loc":{"line":13,"column":24},"parent":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/ed-compat.js","resolved":"/Users/calumryan/Sites/kirbystarter/site/plugins/weather/node_modules/sshpk/lib/signature.js"}],"generated":{"js":"\n// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n  Verifier: Verifier,\n  Signer: Signer\n};\n\nvar nacl = require('tweetnacl');\n\nvar stream = require('stream');\n\nvar util = require('util');\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar Signature = require('./signature');\n\nfunction Verifier(key, hashAlgo) {\n  if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');\n  this.key = key;\n  this.chunks = [];\n  stream.Writable.call(this, {});\n}\n\nutil.inherits(Verifier, stream.Writable);\n\nVerifier.prototype._write = function (chunk, enc, cb) {\n  this.chunks.push(chunk);\n  cb();\n};\n\nVerifier.prototype.update = function (chunk) {\n  if (typeof chunk === 'string') chunk = Buffer.from(chunk, 'binary');\n  this.chunks.push(chunk);\n};\n\nVerifier.prototype.verify = function (signature, fmt) {\n  var sig;\n\n  if (Signature.isSignature(signature, [2, 0])) {\n    if (signature.type !== 'ed25519') return false;\n    sig = signature.toBuffer('raw');\n  } else if (typeof signature === 'string') {\n    sig = Buffer.from(signature, 'base64');\n  } else if (Signature.isSignature(signature, [1, 0])) {\n    throw new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified');\n  }\n\n  assert.buffer(sig);\n  return nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(sig), new Uint8Array(this.key.part.A.data));\n};\n\nfunction Signer(key, hashAlgo) {\n  if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');\n  this.key = key;\n  this.chunks = [];\n  stream.Writable.call(this, {});\n}\n\nutil.inherits(Signer, stream.Writable);\n\nSigner.prototype._write = function (chunk, enc, cb) {\n  this.chunks.push(chunk);\n  cb();\n};\n\nSigner.prototype.update = function (chunk) {\n  if (typeof chunk === 'string') chunk = Buffer.from(chunk, 'binary');\n  this.chunks.push(chunk);\n};\n\nSigner.prototype.sign = function () {\n  var sig = nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(Buffer.concat([this.key.part.k.data, this.key.part.A.data])));\n  var sigBuf = Buffer.from(sig);\n  var sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');\n  sigObj.hashAlgorithm = 'sha512';\n  return sigObj;\n};"},"sourceMaps":null,"error":null,"hash":"5e2ca1e83c130509a0edeb1f551ee3f6","cacheData":{"env":{}}}